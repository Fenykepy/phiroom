Switch from angularjs to react / flux:
    - angular white page served at beginning sucks;
    - angular SEO sucks, workarround with headless browser are not so clean, accessibility is poor;
    - lot of duplicate code between server and client side;
    - angular is monoblock, hard to change it's components when app grows or take a different direction;

React can be use to serve server side generated html with same code as client side, client side code
is used only for managing dom updates:
    - no more SEO problems;
    - no more white page waiting data;
    - welcome accessibility;
React is only "view" in MVC, you are free to use any other components which suits your project to
manage other parts. No more jail in a big monoblock framework.
React can be used only client side as well : for migrating server side can be keep in it's actual state
(django / django-rest-framework) for a later move to node-js / react.

React home page :
    - https://facebook.github.io/react/

React server side routing exemple:
    - https://github.com/mhart/react-server-routing-example



Librairys to use client side:
    - Promises: https://github.com/jakearchibald/es6-promise/blob/master/README.md
    polyfill for ES6 promises
    - Require() client side: browserify (npm install -g browserify)
    - Flux dispatcher
    - Object.observe polyfill
    

Librairys to use server side:
    - Generate offline jsx files: react-tools (npm install -g react-tools)
    - Jpeg previews generation:
    - Nodejs
    - Memcached
    - Express
    - Node postgreesql
    - Sha1
    - Xmp
    - Jwt


Librairys to use both client and server sides:
    - markdown parser: marked
    - router: https://github.com/rackt/react-router
