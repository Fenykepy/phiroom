# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-07-02 14:40
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import librairy.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Collection')),
                ('slug', models.SlugField(max_length=150, verbose_name='Slug')),
                ('n_pict', models.PositiveIntegerField(default=0, verbose_name='Pictures number')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='librairy.Collection')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='CollectionsEnsemble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Ensemble de collection')),
                ('slug', models.SlugField(max_length=150, verbose_name='slug')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='librairy.CollectionsEnsemble')),
            ],
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
                ('slug', models.SlugField(max_length=150, verbose_name='Slug')),
                ('color', models.CharField(default='#CB5151', max_length=7, verbose_name='Color')),
            ],
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('importation_date', models.DateTimeField(auto_now_add=True, verbose_name='Importation date')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Last update date')),
                ('sha1', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('source_file', models.ImageField(storage=librairy.models.PictureFileSystemStorage(), upload_to=librairy.models.set_picturename)),
                ('previews_path', models.CharField(blank=True, max_length=254, null=True)),
                ('title', models.CharField(blank=True, max_length=140, null=True, verbose_name='Title')),
                ('legend', models.TextField(blank=True, null=True, verbose_name='Legend')),
                ('name_import', models.CharField(max_length=140, verbose_name='Importation name')),
                ('name', models.CharField(max_length=140, verbose_name='Name')),
                ('type', models.CharField(blank=True, max_length=30, null=True, verbose_name='File type')),
                ('weight', models.PositiveIntegerField(blank=True, null=True, verbose_name='File weight')),
                ('width', models.PositiveIntegerField(blank=True, null=True, verbose_name='File width')),
                ('height', models.PositiveIntegerField(blank=True, null=True, verbose_name='File height')),
                ('ratio', models.FloatField(blank=True, null=True, verbose_name='Image ratio (width / height)')),
                ('portrait_orientation', models.BooleanField(default=False, verbose_name='Portrait orientation')),
                ('landscape_orientation', models.BooleanField(default=False, verbose_name='Landscape orientation')),
                ('color', models.BooleanField(default=True, verbose_name='Color picture')),
                ('camera', models.CharField(blank=True, max_length=300, null=True, verbose_name='Camera model')),
                ('lens', models.CharField(blank=True, max_length=300, null=True, verbose_name='Lens model')),
                ('speed', models.CharField(blank=True, max_length=30, null=True, verbose_name='Shutter speed')),
                ('aperture', models.CharField(blank=True, max_length=30, null=True, verbose_name='Aperture')),
                ('iso', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Iso sensibility')),
                ('rate', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Rating')),
                ('exif_date', models.DateTimeField(blank=True, null=True, verbose_name='Exif date')),
                ('exif_origin_date', models.DateTimeField(blank=True, null=True, verbose_name='Exif origin date')),
                ('copyright', models.CharField(blank=True, max_length=300, null=True)),
                ('copyright_state', models.CharField(blank=True, max_length=30, null=True, verbose_name='Copyright state')),
                ('copyright_description', models.TextField(blank=True, null=True, verbose_name='Copyright description')),
                ('copyright_url', models.URLField(blank=True, null=True, verbose_name='Copyright url')),
                ('label', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='librairy.Label', verbose_name='Label')),
            ],
            options={
                'ordering': ['importation_date'],
                'get_latest_by': 'importation_date',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
                ('slug', models.SlugField(max_length=150, verbose_name='Slug')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='librairy.Tag')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='picture',
            name='tags',
            field=models.ManyToManyField(blank=True, to='librairy.Tag', verbose_name='Keywords'),
        ),
        migrations.AddField(
            model_name='collectionpicture',
            name='picture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='librairy.Picture'),
        ),
        migrations.AddField(
            model_name='collection',
            name='ensemble',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='librairy.CollectionsEnsemble'),
        ),
        migrations.AddField(
            model_name='collection',
            name='pictures',
            field=models.ManyToManyField(blank=True, through='librairy.CollectionPicture', to='librairy.Picture', verbose_name='Pictures'),
        ),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together=set([('parent', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='collectionsensemble',
            unique_together=set([('slug', 'parent')]),
        ),
        migrations.AlterUniqueTogether(
            name='collectionpicture',
            unique_together=set([('collection', 'picture')]),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together=set([('slug', 'ensemble')]),
        ),
    ]
