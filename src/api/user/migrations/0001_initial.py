# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-07-02 14:40
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.CharField(blank=True, max_length=42, null=True)),
                ('uuid_expiration', models.DateTimeField(blank=True, null=True)),
                ('validated_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Validated email')),
                ('is_weblog_author', models.BooleanField(default=False)),
                ('is_librairy_member', models.BooleanField(default=False)),
                ('avatar', models.ImageField(blank=True, help_text='A picture to download as avatar.', null=True, upload_to='images/avatars', verbose_name='Avatar')),
                ('author_name', models.CharField(blank=True, help_text='Your name as shown under content you published', max_length=100, null=True, verbose_name='Author name')),
                ('website', models.URLField(blank=True, help_text='A link to your website', max_length=2000, null=True, verbose_name='Website')),
                ('facebook_link', models.URLField(blank=True, help_text='A link to your facebook page', max_length=2000, null=True, verbose_name='Facebook')),
                ('flickr_link', models.URLField(blank=True, help_text='A link to your flickr page', max_length=2000, null=True, verbose_name='Flickr')),
                ('px500_link', models.URLField(blank=True, help_text='A link to your 500px page', max_length=2000, null=True, verbose_name='500px')),
                ('twitter_link', models.URLField(blank=True, help_text='A link to your twitter page', max_length=2000, null=True, verbose_name='Twitter')),
                ('gplus_link', models.URLField(blank=True, help_text='A link to your google + page', max_length=2000, null=True, verbose_name='Google +')),
                ('pinterest_link', models.URLField(blank=True, help_text='A link to your pinterest page', max_length=2000, null=True, verbose_name='Pinterest')),
                ('vk_link', models.URLField(blank=True, help_text='A link to your vkontakte page', max_length=2000, null=True, verbose_name='Vkontakte')),
                ('mail_newsletter', models.BooleanField(default=False, help_text='To receive a mail at each new publication.', verbose_name='Suscribe to news letter')),
                ('mail_contact', models.BooleanField(db_index=True, default=False, help_text='To receive mails sent from contact page.(for staff members only)', verbose_name='Receive contact emails')),
                ('mail_registration', models.BooleanField(db_index=True, default=False, help_text='To receive a mail at each new registration.(for staff members only)', verbose_name="Receive registration's emails")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
